Par Delta Dashboard System Overview
===================================

System Flow Overview
--------------------
1. Data Source:
   - All business data (sales, labor, inventory, employee info) is stored in a Supabase database.
2. Data Access & Filtering:
   - Each dashboard connects to Supabase using credentials stored in Streamlit secrets.
   - Data is filtered by store PC number for isolation.
3. Dashboard Generation:
   - Individual dashboards are generated using a template and the `generate_stores.py` script.
   - Each store gets its own directory with a customized dashboard and config.
4. Dashboard UI:
   - Dashboards are built with Streamlit, providing interactive charts, metrics, and data tables.
   - Main dashboard modules are in `streamlit_app/pages/` (central dashboard) and generated store directories (individual dashboards).
5. Deployment:
   - Dashboards are deployed to Streamlit Cloud, each with its own subdomain (e.g., `357993.streamlit.app`).
   - Secrets (Supabase URL and key) must be configured for each deployment.

Essential Files
---------------
Central Dashboard:
- `streamlit_app/streamlit_app.py`: Main entry point for the central dashboard.
- `streamlit_app/pages/`: Individual dashboard modules.
- `streamlit_app/requirements.txt`: Python dependencies.

Individual Store Dashboards:
- `individual_stores/generate_stores.py`: Generates dashboards for each store.
- `individual_stores/template/store_dashboard.py`: Store dashboard template.
- `individual_stores/store_config.py`: Store configuration.
- `individual_stores/template/requirements.txt`: Dependencies for store dashboards.
- `individual_stores/store_xxxxx_storeName/streamlit_app.py`: Generated dashboard for each store.
- `individual_stores/store_xxxxx_storeName/.streamlit/secrets.toml.template`: Secrets template for deployment.

Data & Database:
- Supabase database: All business data tables.
- Secrets: `SUPABASE_URL`, `SUPABASE_KEY` (configured in Streamlit Cloud).

Quick Start
-----------
1. Run `python individual_stores/generate_stores.py` to generate dashboards for all stores.
2. Deploy each dashboard to Streamlit Cloud, set up secrets, and assign subdomains.
3. For the central dashboard, deploy `streamlit_app/streamlit_app.py` with its requirements and secrets.

File Connectivity Summary
------------------------
1. Core Dashboard Files: Directly connected to the dashboard UI and data.
2. Individual Store Dashboard System: Used for generating and configuring store dashboards.
3. Data Processing & Upload Scripts: Utility scripts for ingesting, cleaning, and uploading data to Supabase.
4. Future Features & Admin Tools: For future expansion, admin, or user management.
5. Testing & Utility Scripts: For setup and troubleshooting.
6. Other/Unused/Template Files: Templates or manual/batch data operation scripts.

How to Tell if a File is Connected?
-----------------------------------
- Imported or called by `streamlit_app.py`, a page in `streamlit_app/pages/`, or a generated store dashboard = connected.
- Referenced in scripts for data upload, cleaning, or admin = utility/future.
- In `future_update` folder = planned features.

Summary
-------
- Dashboard UI: Powered by `streamlit_app/streamlit_app.py` and its pages.
- Data: Prepared and uploaded by scripts in `scripts/ingest/` and `scripts/upload/`.
- Individual store dashboards: Generated by scripts in `individual_stores/`.
- Future features/admin tools: In `future_update/`.
- Testing/utilities: For setup and troubleshooting.

            AI Features in Par Delta Dashboard
            Chat Assistant (streamlit_app/pages/Chat.py)

            Uses OpenAI's GPT-4o model for business data Q&A.
            Retrieval-Augmented Generation (RAG): Combines database search with LLM for accurate answers.
            Embedding Models: Uses OpenAI text-embedding-3-small and HuggingFace embeddings for semantic search.
            Source tracking: Shows which data tables the answer comes from.
            Inventory QA (streamlit_app/pages/Inventory_QA.py)

            SQL agent powered by LangChain and OpenAI (GPT-4).
            Natural language queries over inventory data.
            Automated SQL generation and execution.
            General LLM Integration

            Multiple dashboard modules use OpenAI models for summarization, insights, and natural language processing.
            Custom prompts for business analytics.
            Vector Search

            FAISS vector store for similarity search on business documents and data.
            Fallback Embeddings

            If OpenAI quota is exceeded, switches to HuggingFace local embeddings for semantic search.
            Planned/Future AI Features

            Future modules in future_update directory (admin dashboard, user management, advanced reports) are set up for LLM integration and smart analytics.